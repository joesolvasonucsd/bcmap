# Usage: 
#	python 2.barcode2enhancer_v3.py <dir/to/data/> </dir/to/dict/> <number_inputs_x2.collapsed2counts.py> <min_enhancer_activation> <sample_name>

# Note:
#	No input file names needed as these file names do not change from sample to sample. 
#	<number_inputs_x2.collapsed2counts.py> refers to the number of files inputted to x2.collapsed2counts. this is important because this will determine the number of colums in the barcode2reads.txt & barcode2reads_unique4all files
#	<min_enhancer_activation> activation threshold requirement for enhancer. typically set for WT enhancer.



import glob
import sys

# Ensure script is called with arguments
try:
	dataDir=sys.argv[1]+'/'
	dictDir=sys.argv[2]+'/'
	numFiles=int(sys.argv[3])
	minActive=float(sys.argv[4])
	jobName=sys.argv[5]
except IndexError:
        print("Error: You did not specify all required arguments. View the head (use the head command) to view all necessary arguments and their order")


fns=glob.glob(dictDir+"/*") #Directory of DNA dictionary
Dict={} 
# eg 
# Dict = { "Bin" : 
#		{ "bc" : [ "bc_type" , { "enhancer" : count , ... } , bc_count_global ] } }

for fn in fns:
	print "Reading "+fn.split("/")[-1] # AAA.txt
	Bin=fn.split("/")[-1].split(".")[0] # AAA
	Dict[Bin]={} 
	for line in open(fn).read().split("\n"): # looks at each line in a single dict (eg AAA.txt)
		if line:
			a=line.split("\t") 
			# above line splits bc-enhancer entry into its constitutive pieces of information:
			#	a[0] = barcode
			#	a[1] = barcode type (u, e, u_e or m)
			#	a[2] = enhancer
			#	a[3] = barcode count across enhancers (how many did times did you see barcode regardless of enhancer)
			#	a[4] = enhancer count for particular barcode (does not consider other times enhancer observed with other barcodes)
			if not a[0] in Dict[Bin]: 
				Dict[Bin][a[0]]=[a[1],{},int(a[3])]
			if not a[2] in Dict[Bin][a[0]][1]:
				Dict[Bin][a[0]][1][a[2]]=0
			Dict[Bin][a[0]][1][a[2]]+=int(a[4])




line_out=""
line_out3=""
line_out5=""
open(dataDir+"barcode2enhancer2reads.txt","w").write("") # Everything in RNA library
open(dataDir+"barcode2enhancer2reads_uniqueAll4.txt","w").write("") # Everything in RNA library that are unique in DNA library
open(dataDir+"barcode2enhancer2reads_uniqueAll4_overlap.txt","w").write("") # overlap of all RNA librarys
print "Reading barcode2reads.txt"
cline=0
for line in open(dataDir+"barcode2reads.txt").read().rstrip().split("\n"): #barcode2reads.txt generated by RNAseq2reads.py
	a=line.split("\t")
	# columns of barcode2reads.txt
	#	a[0] = barcode (may not be unique if barcode observed in multiple files)
	#	a[1] = barcode count as observed in one file * 1000000.0 / totalRNAReadsin that one fil	
	if a[0]: # if lines remain in file
		temp=line+"\t"
		
		# parse bin of RNAseq-observed barcode
		Bin=a[0][:3]
		numUnique=0

		if Bin in Dict:
			if a[0] in Dict[Bin]:
				if Dict[Bin][a[0]][0]=="u":# bc type 'u'?
					numUnique+=1
				evaluator=0
				DominantEnhancer=""
				for enhancer in Dict[Bin][a[0]][1]: # for enhancers in bc
					val=Dict[Bin][a[0]][1][enhancer] # val = number of bc-enhancer observations
					if val>evaluator: # mode enhancer = dominant enhancer
						DominantEnhancer=enhancer
						evaluator=val

#				print Dict[Bin][a[0]]
#				print DominantEnhancer
				temp+=Dict[Bin][a[0]][0]+"\t"+str(Dict[Bin][a[0]][2])+"\t"+DominantEnhancer+"\t"+str(Dict[Bin][a[0]][1][DominantEnhancer])
		temp+="\n" # one RNAseq-observed barcode per line	
		line_out+=temp
		if numUnique>0 and evaluator>0: # (if numUnique >0, then bc is unique) and (if evaluator>0, enhancer observed more than 0 times)
			line_out3+=temp # line_out3 is for unique barcodes only
			if min([float(i) for i in a[1:]])>0: ### ??? Figure out wht this line is doing
				line_out5+=temp
		cline+=1
		if cline/10000==cline/10000.0:
			print cline
			open(dataDir+"barcode2enhancer2reads.txt","a").write(line_out)
			open(dataDir+"barcode2enhancer2reads_uniqueAll4.txt","a").write(line_out3)
			open(dataDir+"barcode2enhancer2reads_uniqueAll4_overlap.txt","a").write(line_out5)
			line_out=""
			line_out3=""
			line_out5=""
open(dataDir+"barcode2enhancer2reads.txt","a").write(line_out)
open(dataDir+"barcode2enhancer2reads_uniqueAll4.txt","a").write(line_out3)
open(dataDir+"barcode2enhancer2reads_uniqueAll4_overlap.txt","a").write(line_out5)




####################################################################################################
#generate DNA_library.fa as the background for motif search
####################################################################################################

# Writes allEnhancerInDNALibrary_u.fa, a fasta file with all dominant enhancers mapped to unique barcodes

line_out=""
enhancers={}
for Bin in Dict:
	for barcode in Dict[Bin]:

		numUnique=0
		if Dict[Bin][barcode][0]=="u":
			numUnique+=1

		evaluator=0
		DominantEnhancer=""
		for enhancer in Dict[Bin][barcode][1]:
			if enhancer:
				val=Dict[Bin][barcode][1][enhancer]
				if val>evaluator:
					DominantEnhancer=enhancer
					evaluator=val
		if numUnique>0 and evaluator>0:
			enhancers[DominantEnhancer]=1

ID=0
for enhancer in enhancers:
	ID+=1
	line_out+=">"+str(ID)+"\n"+enhancer+"\n"


open(dataDir+"allEnhancerInDNALibrary_u.fa","w").write(line_out)

print ID




####################################################################################################
#collapse enhancers with multiple barcodes, and gives the reads of the highest barcode.
####################################################################################################

# columns of barcode2enhancer2reads_uniqueAll4.txt
#       a[0] = bc
#       a[1:k+1] = bc count normalized w/in file (bc read count in file * 1e6 / total reads in file)
#		where k = number of additional files inputted into the pipeline (eg if 2 files inputted, k=1; 3 files inputted, k=2; etc)
#       a[k+2] = bc type
#       a[k+3] = bc count global (regardless of what enhancer it maps to)
#       a[k+4] = dominant enhancer mapped to bc
#	a[k+5] = dominant enhancer count

import numpy as np

enhancers={}
# eg
# enhancers = { "enhancer" : [ "bc1,...,bcn" , [ [ bc1_count_norm_1 , ... , bc1_count_norm_n ] , ... , [ bc2_count_norm_1 , ... , bc2_count_norm_n ] ] , [ bc1_count , ... , bc2_count , dom_enh_count ] }

# label indices for clarity
bc           =0
bc_count_norm=[index+1 for index in list(range(numFiles))] # if multiple counts, you can turn this into a list
bc_type      =numFiles+1
bc_count     =numFiles+2
dom_enh      =numFiles+3
dom_enh_count=numFiles+4

max_col=max(bc_count_norm)
min_col=min(bc_count_norm)
 
for line in open(dataDir+"barcode2enhancer2reads_uniqueAll4.txt").read().rstrip().split("\n"):
	a=line.split("\t")
	if a[dom_enh]:
		if not a[dom_enh] in enhancers:
			enhancers[a[dom_enh]]=[a[bc],[[float(i) for i in a[min_col:max_col+1]]],[a[bc_count]],[a[dom_enh_count]]]
		else:
			enhancers[a[dom_enh]][0]+=","+a[0]
			enhancers[a[dom_enh]][1].append([float(i) for i in a[min_col:max_col+1]])
			enhancers[a[dom_enh]][2].append(a[bc_count])
			enhancers[a[dom_enh]][3].append(a[dom_enh_count])

line_out=""
for enhancer in enhancers:
	line_out+=enhancers[enhancer][0]+"\t"+"\t".join([str(i) for i in np.max(enhancers[enhancer][1],0)])+"\tu\t"+str(max(enhancers[enhancer][2]))+"\t"+enhancer+"\t"+str(max(enhancers[enhancer][3]))+"\n"

open(dataDir+"barcode2enhancer2reads_uniqueAll4_collapsed.txt","w").write(line_out)




####################################################################################################
#generate forground for motif search
####################################################################################################



line_out=""
ID=0
for line in open(dataDir+"barcode2enhancer2reads_uniqueAll4_collapsed.txt").read().rstrip().split("\n"):
	a=line.split("\t")
	if float(a[1])>=minActive:
		ID+=1
		line_out+=">"+str(ID)+" "+" ".join(a[1:5])+"\n"+a[-2]+"\n"

open(dataDir+jobName+"_enhancers_greater_"+str(minActive)+".fa","w").write(line_out)



#####################################################################################################
##generate Fn2 and Fn3 for motif search separately
#####################################################################################################
#
#
#
#line_out=""
#ID=0
#for line in open("barcode2enhancer2reads_uniqueAll4_collapsed.txt").read().rstrip().split("\n"):
#	a=line.split("\t")
#	if float(a[1])>=4:
#		ID+=1
#		line_out+=">"+str(ID)+" "+" ".join(a[1:5])+"\n"+a[-2]+"\n"
#
#open("enhancers_cut4Fn2_20150226.fa","w").write(line_out)
#
#line_out=""
#ID=0
#for line in open("barcode2enhancer2reads_uniqueAll4_collapsed.txt").read().rstrip().split("\n"):
#	a=line.split("\t")
#	if float(a[2])>=4:
#		ID+=1
#		line_out+=">"+str(ID)+" "+" ".join(a[1:5])+"\n"+a[-2]+"\n"
#
#open("enhancers_cut4Fn3_20150226.fa","w").write(line_out)
