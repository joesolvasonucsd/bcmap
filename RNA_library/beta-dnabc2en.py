# Usage: 
#	python 2.barcode2enhancer_v3.py </dir/to/RNAbc+DNAbc_counts.txt> </dir/to/DNAbc_counts.txt> <dir/to/DNAbc_counts.txt> </dir/to/dict/> <number_inputs_x2.collapsed2counts.py> <min_enhancer_activation> <sample_name>

# Notes
#	</dir/to/RNAbc+DNAbc_counts.txt> = output of x2.collapsed2counts where input is RNAbc and DNAbc combined
#	</dir/to/DNAbc_counts.txt> = output of x2.collapsed2counts where input is DNAbc only
#	<number_inputs_x2.collapsed2counts.py> refers to the number of files inputted to x2.collapsed2counts. this is important because this will determine the number of colums in the barcode2reads.txt & barcode2reads_unique4all files
#	<min_enhancer_activation> activation threshold requirement for enhancer. typically set for WT enhancer.
#	no output filename because output filenames are standardized



import glob
import sys

# Ensure script is called with arguments
try:
	inputFName=sys.argv[1]
	dictDir=sys.argv[2]+'/'
	numFiles=int(sys.argv[3])
	minActive=float(sys.argv[4])
	jobName=sys.argv[5]
except IndexError:
        print("Error: You did not specify all required arguments. View the head (use the head command) to view all necessary arguments and their order")


fns=glob.glob(dictDir+"/*") #Directory of DNA dictionary
Dict={} 
# eg 
# Dict = { "Bin" : 
#		{ "bc" : [ "bc_type" , { "enhancer" : count , ... } , bc_count_global ] } }

for fn in fns:
	print "Reading "+fn.split("/")[-1] # AAA.txt
	Bin=fn.split("/")[-1].split(".")[0] # AAA
	Dict[Bin]={} 
	for line in open(fn).read().split("\n"): # looks at each line in a single dict (eg AAA.txt)
		if line:
			a=line.split("\t") 
			# above line splits bc-enhancer entry into its constitutive pieces of information:
			#	a[0] = barcode
			#	a[1] = barcode type (u, e, u_e or m)
			#	a[2] = enhancer
			#	a[3] = barcode count across enhancers (how many did times did you see barcode regardless of enhancer)
			#	a[4] = enhancer count for particular barcode (does not consider other times enhancer observed with other barcodes)
			if not a[0] in Dict[Bin]: 
				Dict[Bin][a[0]]=[a[1],{},int(a[3])]
			if not a[2] in Dict[Bin][a[0]][1]:
				Dict[Bin][a[0]][1][a[2]]=0
			Dict[Bin][a[0]][1][a[2]]+=int(a[4])




line_out=""
line_out3=""
line_out5=""
open(dataDir+"barcode2enhancer2reads.txt","w").write("") # Everything in RNA library
open(dataDir+"barcode2enhancer2reads_uniqueAll4.txt","w").write("") # Everything in RNA library that are unique in DNA library
open(dataDir+"barcode2enhancer2reads_uniqueAll4_overlap.txt","w").write("") # overlap of all RNA librarys

cline=0
for line in open(inputFName).read().rstrip().split("\n"): #barcode2reads.txt generated by RNAseq2reads.py
	a=line.split("\t")
	# columns of barcode2reads.txt
	#	a[0] = barcode (may not be unique if barcode observed in multiple files)
	#	a[1] = barcode count as observed in one file * 1000000.0 / totalRNAReadsin that one fil	
	if a[0]: # if lines remain in file
		temp=line+"\t"
		
		# parse bin of RNAseq-observed barcode
		Bin=a[0][:3]
		numUnique=0

		if Bin in Dict:
			if a[0] in Dict[Bin]:
				if Dict[Bin][a[0]][0]=="u":# bc type 'u'?
					numUnique+=1
				evaluator=0
				DominantEnhancer=""
				for enhancer in Dict[Bin][a[0]][1]: # for enhancers in bc
					val=Dict[Bin][a[0]][1][enhancer] # val = number of bc-enhancer observations
					if val>evaluator: # mode enhancer = dominant enhancer
						DominantEnhancer=enhancer
						evaluator=val

#				print Dict[Bin][a[0]]
#				print DominantEnhancer
				temp+=Dict[Bin][a[0]][0]+"\t"+str(Dict[Bin][a[0]][2])+"\t"+DominantEnhancer+"\t"+str(Dict[Bin][a[0]][1][DominantEnhancer])
		temp+="\n" # one RNAseq-observed barcode per line	
		line_out+=temp
		if numUnique>0 and evaluator>0: # (if numUnique >0, then bc is unique) and (if evaluator>0, enhancer observed more than 0 times)
			line_out3+=temp # line_out3 is for unique barcodes only
			if min([float(i) for i in a[1:]])>0: ### ??? Figure out wht this line is doing
				line_out5+=temp
		cline+=1
		if cline/10000==cline/10000.0:
			print cline
			open(dataDir+"barcode2enhancer2reads.txt","a").write(line_out)
			open(dataDir+"barcode2enhancer2reads_uniqueAll4.txt","a").write(line_out3)
			open(dataDir+"barcode2enhancer2reads_uniqueAll4_overlap.txt","a").write(line_out5)
			line_out=""
			line_out3=""
			line_out5=""
open(dataDir+"barcode2enhancer2reads.txt","a").write(line_out)
open(dataDir+"barcode2enhancer2reads_uniqueAll4.txt","a").write(line_out3)
open(dataDir+"barcode2enhancer2reads_uniqueAll4_overlap.txt","a").write(line_out5)


###################~~~~~~!!!!
# FOR BETA TESTING

import pickle

with open(dataDir+"dict.pickle",'wb') as fname:
	pickle.dump(Dict, fname, protocol=pickle.HIGHEST_PROTOCOL)
